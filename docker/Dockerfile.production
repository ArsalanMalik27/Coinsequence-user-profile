# Creating a python base with shared environment variables
FROM python:3.10-slim as python-base
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"
ARG CODEARTIFACT_TOKEN

# builder-base is used to build dependencies
FROM python-base as builder-base
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
    curl \
    build-essential

# Install Poetry - respects $POETRY_VERSION & $POETRY_HOME
ENV POETRY_VERSION=1.4.0
RUN curl -sSL https://install.python-poetry.org | python -

# We copy our Python requirements here to cache them
# and install only runtime deps using poetry
WORKDIR $PYSETUP_PATH
COPY ./poetry.lock ./pyproject.toml ./
COPY ./scripts ./
RUN poetry config repositories.cq-packages https://coinsequence-044541287254.d.codeartifact.us-east-2.amazonaws.com/pypi/cq-packages
RUN poetry config http-basic.cq-packages aws CODEARTIFACT_TOKEN
RUN poetry install --only main


# 'production' stage uses the clean 'python-base' stage and copyies
# in only our runtime deps that were installed in the 'builder-base'
FROM python-base as production

COPY ./docker/gunicorn_conf.py /gunicorn_conf.py
WORKDIR /app
COPY . .
COPY --from=builder-base $VENV_PATH $VENV_PATH

COPY ./docker/docker-entrypoint-prod.sh /docker-entrypoint-prod.sh
COPY ./docker/prod_script.sh /prod_script.sh
RUN chmod +x /docker-entrypoint-prod.sh
RUN chmod +x /prod_script.sh
ENTRYPOINT /docker-entrypoint-prod.sh $0 $@

ENV PATH="$VENV_PATH/bin:$PATH"

RUN python -c 'from sentence_transformers import SentenceTransformer; embedder = SentenceTransformer("all-MiniLM-L6-v2")'

CMD /prod_script.sh
